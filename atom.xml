<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[El blog de Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></title>
  <link href="http://josebermudez.github.io/atom.xml" rel="self"/>
  <link href="http://josebermudez.github.io/"/>
  <updated>2013-07-12T13:41:37-05:00</updated>
  <id>http://josebermudez.github.io/</id>
  <author>
    <name><![CDATA[Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico/"/>
    <updated>2013-07-12T07:21:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico</id>
    <content type="html"><![CDATA[<p>
Para entender mejor el tema de las pruebas unitarias en PHP vamos a crear un ejemplo con el 
cual demostaremos la utilidad y los beneficios que trae para el desarrollo realizar una pruebas unitarias,
ademas como mediante TDD podemos ir construyendo paso a paso nuestro c&oacute;digo productivo y lo mejor,
con menos posibilidades de fallo.</p>


<!-- more -->


<p>Ahora si manos a la obra, vamos a suponer que en nuestra sprint back log nos entrega el siguiente requisito (historia de usuario):
</p>


<p>
<strong>Como</strong> visitante del portal<br/> 
</p>


<p>
<strong>Yo quiero</strong> realizar las operaciones b&aacute;sicas de la aritm&eacute;tica<br/> 
</p>


<p>
<strong>De manera que</strong> pueda sumar, dividir, restar o multiplicar dos n&uacute;meros.<br/> 
</p>


<p>Ya tenemos nuestro requisto:
&ldquo; debemos realizar un modulo que esta en un portal web que nos permita
realizar las operaciones b&aacute;sicas de la aritm&eacute;tica &rdquo;.<br/>
<span> cual seria nuestro primer paso?</span>
</p></p>

<p>
Normalmente nuestra respuesta ser&iacute;a: realizar el diagrama de clases, o empezar  a escribir c&oacute;digo, 
aqui es donde viene el cambio de chip, lo primero que tenemos que hacer es:<br/>
<strong> &iexcl; Escribir el test ! manos a la obra</strong>
</p>


<p>Analizemos que necesitamos:</p>

<ul>
<li>Una clase que contenga los m&eacute;todos para las operaciones b&aacute;sicas.</li>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para restar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la resta de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para dividir que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el cociente de la divisi&oacute;n de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para multiplicar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el resultado de la multiplicacipon de 2 n&uacute;meros.</li>
</ul>


<p>
Ya con una idea inicial de que acciones debe tener nuestro script, entonces creamos nuestra prueba la vamos a llamar: <blockquote>ArithmeticBasicOperationsTest</blockquote>

<figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

La clase de prueba extiende de una clase llamada PHPUnit_Framework_TestCase y es la que nos indica que estamos programando un test y nos permite usar todas las caracter&iacute;sticas de PhpUnit.
</p>


<p>

<figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
</span><span class='line'>     /**
</span><span class='line'>     * Clase que contiene los m&eacute;todos b&aacute;sicos de operaci&oacute;n
</span><span class='line'>     * 
</span><span class='line'>     * @var ArithmeticBasicOperations 
</span><span class='line'>     */
</span><span class='line'>    protected $ArithmeticBasicOperations;
</span><span class='line'>     /**
</span><span class='line'>     * M&eacute;todo que se ejecuta por cada test
</span><span class='line'>     * 
</span><span class='line'>     * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
</span><span class='line'>     * que se le va a realizar las pruebas asi como los set de datos a usar.
</span><span class='line'>     * 
</span><span class='line'>     * @author  Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa &lt;jose.bermudez.correa@gmail.com>
</span><span class='line'>     * @version 1.0
</span><span class='line'>     * 
</span><span class='line'>     * @return void;
</span><span class='line'>     * 
</span><span class='line'>     */
</span><span class='line'>    protected function setUp()
</span><span class='line'>    {
</span><span class='line'>        //Instanciamos el objeto que vamos a probar
</span><span class='line'>        $this->ArithmeticBasicOperations = new ArithmeticBasicOperations();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

Todo script de test debe sobreescribir el m&eacute;todo setUp que se encuentra en la clase <blockquote>PHPUnit_Framework_TestCase</blockquote>
</p>


<p>Para el pr&oacute;ximo post vamos a empezar a codificar nuestro test para probar la funcionalidad de sumar</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalando PhpUnit]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit/"/>
    <updated>2013-07-05T08:54:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit</id>
    <content type="html"><![CDATA[<p>Vamos a instalar la herramienta que nos permitir&aacute; realizar nuestras pruebas unitarias.</p>


<p>Para esto debemos tener previamente en nuestra maquina el entorno de desarrollo PEAR, espero en pr&oacute;ximos post escribir un poco de 
como instalar y para que sirve ese framework.</p>


<!-- more -->


<p>Para instalar phpUnit debemos ejecutar la siguiente l&iacute;nea de comando:</p>

<figure class='code'><figcaption><span>Instalar phpUnit usando PEAR - Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear install -a pear.phpunit.de/PHPUnit ( Windows )</span></code></pre></td></tr></table></div></figure>


<p>Se debe ver algo como esto:</p>

<p><img src="http://josebermudez.github.io/images/cmd-instalar-phpunit.png" width="350" height="350" title="CMD-windows" alt="CMD-windows"></p>

<p>Una vez terminado el proceso ejecutamos el siguiente comando:</p>

<figure class='code'><figcaption><span>Instalar phpUnit usando PEAR - Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear clear-cache</span></code></pre></td></tr></table></div></figure>


<p>Y por &uacute;ltimo verificamos la versi&oacute;n de nuestro phpUnit ejecutando el siguiente comando:</p>

<figure class='code'><figcaption><span>Instalar phpUnit usando PEAR -Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phpunit --version</span></code></pre></td></tr></table></div></figure>


<p>Listo hemos terminado, ahora solo nos basta empezar a escribir nuestras pruebas unitarias para que la vida
como programadores se nos haga mas f&aacute;cil.</p>

<p>Hasta pronto !!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruebas unitarias en PHP]]></title>
    <link href="http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php/"/>
    <updated>2013-06-26T09:38:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php</id>
    <content type="html"><![CDATA[<p>Bueno, el pasado 26 de junio particip&eacute; en el <a href="http://agilescolombia.org/2013/05/16/agile-open-medellin-junio-22-de-2013/" title="Agile Open Medell&iacute;n" target="_blank">Agile Open Medell&iacute;n</a> y entre los asistentes se plante&oacute;
un dojo sobre <b>&ldquo;creaci&oacute;n de pruebas unitaras para Php&rdquo;</b>, all&iacute; not&eacute; que a pesar de que existen
herramientas para realizar las pruebas unitarias en este lenguage, no son tan conocidas como para Java.</p>

<p>Entonces mi primer post va a dar a conocer las herramientas para realizar las pruebas unitarias de nuestros proyecto Php
y en  pr&oacute;ximos post vamos a usar estas herramientas para construir un ejemplo pr&aacute;ctico.</p>

<!-- more -->


<p>Para realizar las pruebas unitarias tenemos que contar con:</p>

<ul>
<li>Servidor Apache y php:
<ol>
        <li><a href="http://www.uwamp.com/en/" title="Uwamp" target="_blank">Uwamp</a> ( mi preferido )</li>
        <li><a href="http://www.apachefriends.org/es/xampp.html" title="xampp" target="_blank">xampp</a></li>
    </ol>
</li>
</ul>


<p>Y debemos instalar, si aun no lo tenemos:</p>

<ul>
<li>PEAR <a href="http://pear.php.net/" title="PEAR" target="_blank">P&aacute;gina oficial</a> </li>
<li>PHPUnit <a href="http://phpunit.de/manual/current/en/index.html" title="PHPUnit" target="_blank">P&aacute;gina oficial</a></li>
</ul>


<p>Y un editor que nos permita escribir y realizar nuestra pruebas:</p>

<ul>
<li>Netbeans <a href="https://netbeans.org/" title="Netbeans" target="_blank">P&aacute;gina oficial</a> </li>
<li>Eclipse <a href="http://www.eclipse.org/" title="Eclipse" target="_blank">P&aacute;gina oficial</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi primer post, bienvenida]]></title>
    <link href="http://josebermudez.github.io/blog/2013/06/23/mi-blog-personal-hola/"/>
    <updated>2013-06-23T15:48:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/06/23/mi-blog-personal-hola</id>
    <content type="html"><![CDATA[<p>Hola, tome la decisi&oacute;n de crear un blog para compartir con la comunidad de
desarrolladores temas que nos permitan aprender nuevas t&eacute;cnicas, obtener
nuevas habilidades y competencias para nuestro que hacer diario: hacer c&oacute;digo
productivo de excelente calidad.</p>

<p>Espero que sea de utilidad para tod@s.
Bienvenidos</p>
]]></content>
  </entry>
  
</feed>
