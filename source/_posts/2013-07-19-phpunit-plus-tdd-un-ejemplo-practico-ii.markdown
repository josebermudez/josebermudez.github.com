---
layout: post
title: "PhpUnit + TDD Un Ejemplo Pr&aacute;ctico II"
date: 2013-07-19 08:05
comments: true
categories: [php, phpUnit, TDD]
---
<p>Continuando con nuestro ejemplo, vamos a crear el test para la funcion sumar, de esta forma vamos 
profundizando en la forma de usar phpUnit.</p>
<!-- more -->
<h1>Creando nuestro test para la funcionalidad de sumar.</h1>
<p>
De acuerdo al an&aacute;lisis que realizamos en el post anterior para la funci&oacute;n de suma lo que queremos es:
<ul>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
</ul>
</p>
<p>
Escribamos entonces el test, retomando lo que habiamos hecho en el post anterior:
{% codeblock Test phpUnit usando Php lang: PHP%}
<?php
include_once dirname(__FILE__) . '/ArithmeticBasicOperations.php';
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
     /**
     * Clase que contiene los m&eacute;todos b&aacute;sicos de operaci&oacute;n
     * 
     * @var ArithmeticBasicOperations 
     */
    protected $arithmeticBasicOperations;
     /**
     * M&eacute;todo que se ejecuta por cada test
     * 
     * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
     * que se le va a realizar las pruebas asi como los set de datos a usar.
     * 
     * @author  Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa <jose.bermudez.correa@gmail.com>
     * @version 1.0
     * 
     * @return void;
     * 
     */
    protected function setUp()
    {
        //Instanciamos el objeto que vamos a probar
        $this->arithmeticBasicOperations = new ArithmeticBasicOperations();
    }

    /**
     * Test de la funci&oacute;n que realiza la suma
     * 
     * @dataProvider dataProviderAdd
     * 
     */
    public function testAdd($numberOne,$numberTwo,$result)
    {        
        $this->assertEquals(
            $result,            
                $this->arithmeticBasicOperations->add(
                    $numberOne,
                    $numberTwo
            )
        );
    }
    /**
     * Set de datos de prueba para el método getReportList
     * 
     * @return array
     */
    public function dataProviderAdd()
    {
        return array(
                //primer set de datos para el test
                array(1,2,3)
        );
    }
}
{% endcodeblock %}
Analizemos el c&oacute;digo:
<ul>
<li>El comentario <i>@dataProvider</i> nos indica que el test va a usar una fuente de datos como entrada y que la funci&oacute;n que 
retorna esa fuente se llama: dataProviderAdd, podemos usar cualquier nombre para la funci&oacute;n pero acostumbro anteponer la palabra <strong>dataProvider</strong> para identificarla facilmente.</li>
<li>El nombre de un test en PhpUnit debe iniciar con la palabra test.</li>
<li>Los par&aacute;metros de entrada del test estan dados en este caso por el dataProvider, si miramos lo que retorna la funci&oacute;n dataProviderAdd, vemos que el array interno tiene 3 posiciones lo cual indica que el test debe recibir 3 par&aacute;metros.</li>
<li>Los test de PhpUnit normalmente usan los assert para validar la prueba, en este caso estamos validando que el valor de la variable $result es igual a lo que nos retorna la funci&oacute;n add de la clase ArithmeticBasicOperations, una lista completa de los assert con los que podemos jugar, la pueden ver aqu&iacute;: <a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions" target="_blank">lista de asserts.</a> </li>
</ul>
<h2>Como ejecutar el test</h2>
Usando la consola de comandos podemos ejecutar un script de prueba, debemos ir hasta la ruta donde
tenemos el test y ejecutar en la consola ( windows ):
{% codeblock Test phpUnit usando Php lang: PHP%}
phpunit ArithmeticBasicOperationsTest.php
{% endcodeblock %}
{% img /images/ejecutando_test_phpUnit.png 671 471 'ejecutando test phpUnit' 'ejecutando test phpUnit' %}
El test ha fallado, este el primer paso cuando estamos desarrollando orientado a las pruebas: <strong>nuestro primer test debe fallar</strong>, en nuestro caso ha fallado por que la clase <blockquote>ArithmeticBasicOperations.php</blockquote> no existe.
</p>
<h2>Generando la clase ArithmeticBasicOperations.php</h2>
<p>Para generar la clase que contiene los m&eacute;todos de las operaciones matem&aacute;ticas podemos usar el comando de phpUnit:<br/>
<blockquote>
phpunit-skelgen --class ArithmeticBasicOperationsTest
</blockquote>
{% img /images/creando_clase_desde_el_test.png 669 103 'creando clase desde el test' 'creando clase desde el test' %}
{% codeblock Clase generada desde el test lang: PHP%}
<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
 */
class ArithmeticBasicOperations
{
    /**
     * @todo Implement add().
     */
    public function add()
    {
        // Remove the following line when you implement this method.
        throw new RuntimeException('Not yet implemented.');
    }
}
{% endcodeblock %}
Modificamos la clase para agregar los par&aacute;metros y las l&iacute;neas de c&oacute;digo necesarias para hacer pasar el test.
{% codeblock Clase generada desde el test lang: PHP%}
<?php
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
 */
class ArithmeticBasicOperations
{
    /**
     * Funci&oacute;n que suma dos n&uacute;meros
     * @param int $intNumberOne primer entero sumando
     * @param int $intNumberTwo segundo entero sumando
     *
     * @return int
     */
     public function add($intNumberOne,$intNumberTwo)
     {
       return  $intNumberOne+$intNumberTwo;
     }
}
{% endcodeblock %}
Si ejecutamos nuestro test de nuevo
{% img /images/test_php_terminado.png 666 216 'El test ha pasado' 'El test ha pasado' %}
Ahora el test ha pasado, el assert que hemos definido ha sido exitoso!
</p>
<p>Para el pr&oacute;ximo post vamos a empezar a agregar otros casos de prueba para nuestro test de
tal forma que abarquemos escenarios donde la funci&oacute;n add() como est&aacute; en este momento falla.</p>