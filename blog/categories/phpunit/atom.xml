<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: phpUnit | El blog de Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></title>
  <link href="http://josebermudez.github.io/blog/categories/phpunit/atom.xml" rel="self"/>
  <link href="http://josebermudez.github.io/"/>
  <updated>2013-07-19T11:26:37-05:00</updated>
  <id>http://josebermudez.github.io/</id>
  <author>
    <name><![CDATA[Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD Un Ejemplo Pr&aacute;ctico II]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/19/phpunit-plus-tdd-un-ejemplo-practico-ii/"/>
    <updated>2013-07-19T08:05:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/19/phpunit-plus-tdd-un-ejemplo-practico-ii</id>
    <content type="html"><![CDATA[<p>Continuando con nuestro ejemplo, vamos a crear el test para la funcion sumar, de esta forma vamos 
profundizando en la forma de usar phpUnit.</p>


<!-- more -->


<h1>Creando nuestro test para la funcionalidad de sumar.</h1>


<p>
De acuerdo al an&aacute;lisis que realizamos en el post anterior para la funci&oacute;n de suma lo que queremos es:
<ul>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
</ul>
</p>


<p><p>
Escibamos entonces el test, retomando lo que habiamos hecho en el post anterior:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> /**
</span><span class='line'> * Clase que contiene los m&amp;eacute;todos b&amp;aacute;sicos de operaci&amp;oacute;n
</span><span class='line'> * 
</span><span class='line'> * @var ArithmeticBasicOperations 
</span><span class='line'> */
</span><span class='line'>protected $arithmeticBasicOperations;
</span><span class='line'> /**
</span><span class='line'> * M&amp;eacute;todo que se ejecuta por cada test
</span><span class='line'> * 
</span><span class='line'> * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
</span><span class='line'> * que se le va a realizar las pruebas asi como los set de datos a usar.
</span><span class='line'> * 
</span><span class='line'> * @author  Jos&amp;eacute; Joaqu&amp;iacute;n Berm&amp;uacute;dez Correa &lt;jose.bermudez.correa@gmail.com&gt;
</span><span class='line'> * @version 1.0
</span><span class='line'> * 
</span><span class='line'> * @return void;
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>protected function setUp()
</span><span class='line'>{
</span><span class='line'>    //Instanciamos el objeto que vamos a probar
</span><span class='line'>    $this-&gt;arithmeticBasicOperations = new ArithmeticBasicOperations();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Test de la funci&amp;oacute;n que realiza la suma
</span><span class='line'> * 
</span><span class='line'> * @dataProvider dataProviderAdd
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>public function testAdd($numberOne,$numberTwo,$result)
</span><span class='line'>{        
</span><span class='line'>    $this-&gt;assertEquals(
</span><span class='line'>        $result,            
</span><span class='line'>            $this-&gt;arithmeticBasicOperations-&gt;add(
</span><span class='line'>                $numberOne,
</span><span class='line'>                $numberTwo
</span><span class='line'>        )
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>/**
</span><span class='line'> * Set de datos de prueba para el método getReportList
</span><span class='line'> * 
</span><span class='line'> * @return array
</span><span class='line'> */
</span><span class='line'>public function dataProviderAdd()
</span><span class='line'>{
</span><span class='line'>    return array(
</span><span class='line'>            //primer set de datos para el test
</span><span class='line'>            array(1,2,3)
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
Analizemos el c&oacute;digo:
<ul>
<li>El comentario <i>@dataProvider</i> nos indica que el test va a usar una fuente de datos como entrada y que la funci&oacute;n que
retorna esa fuente se llama: dataProviderAdd, podemos usar cualquier nombre para la funci&oacute;n pero acostumbro anteponer la palabra <strong>dataProvider</strong> para identificarla facilmente.</li>
<li>El nombre de un test en PhpUnit debe iniciar con la palabra test.</li>
<li>Los par&aacute;metros de entrada del test estan dados en este caso por el dataProvider, si miramos lo que retorna la funci&oacute;n dataProviderAdd, vemos que el array interno tiene 3 posiciones lo cual indica que el test debe recibir 3 par&aacute;metros.</li>
<li>Los test de PhpUnit normalmente usan los assert para validar la prueba, en este caso estamos validando que el valor de la variable $result es igual a lo que nos retorna la funci&oacute;n add de la clase ArithmeticBasicOperations, una lista completa de los assert con los que podemos jugar, la pueden ver aqu&iacute;: <a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions" target="_blank">lista de asserts.</a> </li>
</ul>
<h2>Como ejecutar el test</h2>
Usando la consola de comandos podemos ejecutar un script de prueba, debemos ir hasta la ruta donde
tenemos el test y ejecutar en la consola ( windows ):
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phpunit ArithmeticBasicOperationsTest.php</span></code></pre></td></tr></table></div></figure></notextile></div>
<img src="/images/ejecutando_test_phpUnit.png" width="671" height="471" title="&lsquo;ejecutando test phpUnit&rsquo; &lsquo;ejecutando test phpUnit&rsquo;" >
El test ha fallado, este el primer paso cuando estamos desarrollando orientado a las pruebas: <strong>nuestro primer test debe fallar</strong>, en nuestro caso ha fallado por que la clase <blockquote>ArithmeticBasicOperations.php</blockquote> no existe.
</p>
<h2>Generando la clase ArithmeticBasicOperations.php</h2>
<p>Para generar la clase que contiene los m&eacute;todos de las operaciones matem&aacute;ticas podemos usar el comando de phpUnit:<br/>
<blockquote>
phpunit-skelgen &mdash;class ArithmeticBasicOperationsTest
</blockquote>
<img src="/images/creando_clase_desde_el_test.png" width="669" height="103" title="&lsquo;creando clase desde el test&rsquo; &lsquo;creando clase desde el test&rsquo;" >
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Clase generada desde el test lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/&lt;em>*
</span><span class='line'> * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
</span><span class='line'> &lt;/em>/
</span><span class='line'>class ArithmeticBasicOperations
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>/**
</span><span class='line'> * @todo Implement add().
</span><span class='line'> */
</span><span class='line'>public function add()
</span><span class='line'>{
</span><span class='line'>    // Remove the following line when you implement this method.
</span><span class='line'>    throw new RuntimeException('Not yet implemented.');
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
Modificamos la clase para agregar los par&aacute;metros y las l&iacute;neas de c&oacute;digo necesarias para hacer pasar el test.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Clase generada desde el test lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>/&lt;em>*
</span><span class='line'> * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
</span><span class='line'> &lt;/em>/
</span><span class='line'>class ArithmeticBasicOperations
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>/**
</span><span class='line'> * Funci&amp;oacute;n que suma dos n&amp;uacute;meros
</span><span class='line'> * @param int $intNumberOne primer entero sumando
</span><span class='line'> * @param int $intNumberTwo segundo entero sumando
</span><span class='line'> *
</span><span class='line'> * @return int
</span><span class='line'> */
</span><span class='line'> public function add($intNumberOne,$intNumberTwo)
</span><span class='line'> {
</span><span class='line'>   return  $intNumberOne+$intNumberTwo;
</span><span class='line'> }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
Si ejecutamos nuestro test de nuevo
<img src="/images/test_php_terminado.png" width="666" height="216" title="&lsquo;El test ha pasado&rsquo; &lsquo;El test ha pasado&rsquo;" >
Ahora el test ha pasado, el assert que hemos definido ha sido exitoso!
</p>
<p>Para el pr&oacute;ximo post vamos a empezar a agregar otros casos de prueba para nuestro test de
tal forma que abarquemos escenarios donde la funci&oacute;n add() como est&aacute; en este momento falla.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico/"/>
    <updated>2013-07-12T07:21:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico</id>
    <content type="html"><![CDATA[<p>
Para entender mejor el tema de las pruebas unitarias en PHP vamos a crear un ejemplo donde 
demostaremos la utilidad y los beneficios que las pruebas tempranas trae para el desarrollo de un producto de software, ademas descrubriremos mediante TDD como podemos ir construyendo paso a paso nuestro c&oacute;digo productivo y lo mejor, con menos posibilidades de fallo.</p>


<!-- more -->


<p>Ahora si manos a la obra, vamos a suponer que nuestro sprint back log nos entrega el siguiente requisito (historia de usuario):
</p>


<p>
<strong>Como</strong> visitante del portal<br/> 
</p>


<p>
<strong>Yo quiero</strong> realizar las operaciones b&aacute;sicas de la aritm&eacute;tica<br/> 
</p>


<p>
<strong>De manera que</strong> pueda sumar, dividir, restar o multiplicar dos n&uacute;meros.<br/> 
</p>


<p>Ya tenemos nuestro requisto:
&ldquo; debemos realizar un modulo que esta en un portal web que nos permita
realizar las operaciones b&aacute;sicas de la aritm&eacute;tica &rdquo;.<br/>
<span> cual seria nuestro primer paso?</span>
</p></p>

<p>
Normalmente nuestra respuesta ser&iacute;a: realizar el diagrama de clases, o empezar  a escribir c&oacute;digo, 
aqui es donde viene el cambio de chip, lo primero que tenemos que hacer es:<br/>
<strong> &iexcl; Escribir la prueba !</strong>
</p>


<p>De acuerdo a la historia de usuario vamos a analizar que necesitamos:</p>

<ul>
<li>Una clase que contenga los m&eacute;todos para las operaciones b&aacute;sicas.</li>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para restar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la resta de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para dividir que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el cociente de la divisi&oacute;n de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para multiplicar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el resultado de la multiplicacipon de 2 n&uacute;meros.</li>
</ul>


<p><p>
Ya con una idea inicial de que funciones debe tener nuestro script, entonces creamos nuestra prueba la vamos a llamar: <blockquote>ArithmeticBasicOperationsTest</blockquote>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
La clase de prueba extiende de una clase llamada PHPUnit_Framework_TestCase y es la que nos indica que estamos programando un test y nos permite usar todas las caracter&iacute;sticas de PhpUnit.
</p>
<p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> /**
</span><span class='line'> * Clase que contiene los m&amp;eacute;todos b&amp;aacute;sicos de operaci&amp;oacute;n
</span><span class='line'> * 
</span><span class='line'> * @var ArithmeticBasicOperations 
</span><span class='line'> */
</span><span class='line'>protected $arithmeticBasicOperations;
</span><span class='line'> /**
</span><span class='line'> * M&amp;eacute;todo que se ejecuta por cada test
</span><span class='line'> * 
</span><span class='line'> * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
</span><span class='line'> * que se le va a realizar las pruebas asi como los set de datos a usar.
</span><span class='line'> * 
</span><span class='line'> * @author  Jos&amp;eacute; Joaqu&amp;iacute;n Berm&amp;uacute;dez Correa &lt;jose.bermudez.correa@gmail.com&gt;
</span><span class='line'> * @version 1.0
</span><span class='line'> * 
</span><span class='line'> * @return void;
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>protected function setUp()
</span><span class='line'>{
</span><span class='line'>    //Instanciamos el objeto que vamos a probar
</span><span class='line'>    $this-&gt;arithmeticBasicOperations = new ArithmeticBasicOperations();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div>
Todo script de test debe sobreescribir el m&eacute;todo setUp que se encuentra en la clase <blockquote>PHPUnit_Framework_TestCase</blockquote>
</p>
<p>Para el pr&oacute;ximo post vamos a empezar a codificar nuestro test para probar la funcionalidad de sumar</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalando PhpUnit]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit/"/>
    <updated>2013-07-05T08:54:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit</id>
    <content type="html"><![CDATA[<p>Vamos a instalar la herramienta que nos permitir&aacute; realizar nuestras pruebas unitarias.</p>


<p>Para esto debemos tener previamente en nuestra maquina el entorno de desarrollo PEAR, espero en pr&oacute;ximos post escribir un poco de 
como instalar y para que sirve ese framework.</p>


<!-- more -->


<p>Para instalar phpUnit debemos ejecutar la siguiente l&iacute;nea de comando:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Instalar phpUnit usando PEAR &ndash; Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear install -a pear.phpunit.de/PHPUnit ( Windows )</span></code></pre></td></tr></table></div></figure></notextile></div>
Se debe ver algo como esto:</p>

<p><img src="/images/cmd-instalar-phpunit.png" width="350" height="350" title="&lsquo;CMD-windows&rsquo; &lsquo;CMD-windows&rsquo;" ></p>

<p>Una vez terminado el proceso ejecutamos el siguiente comando:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Instalar phpUnit usando PEAR &ndash; Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pear clear-cache</span></code></pre></td></tr></table></div></figure></notextile></div>
Y por &uacute;ltimo verificamos la versi&oacute;n de nuestro phpUnit ejecutando el siguiente comando:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Instalar phpUnit usando PEAR -Windows </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phpunit &mdash;version</span></code></pre></td></tr></table></div></figure></notextile></div>
Listo hemos terminado, ahora solo nos basta empezar a escribir nuestras pruebas unitarias para que la vida
como programadores se nos haga mas f&aacute;cil.</p>

<p>Hasta pronto !!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruebas unitarias en PHP]]></title>
    <link href="http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php/"/>
    <updated>2013-06-26T09:38:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php</id>
    <content type="html"><![CDATA[<p>Bueno, el pasado 26 de junio particip&eacute; en el <a href="http://agilescolombia.org/2013/05/16/agile-open-medellin-junio-22-de-2013/" title="Agile Open Medell&iacute;n" target="_blank">Agile Open Medell&iacute;n</a> y entre los asistentes se plante&oacute;
un dojo sobre <b>&ldquo;creaci&oacute;n de pruebas unitaras para Php&rdquo;</b>, all&iacute; not&eacute; que a pesar de que existen
herramientas para realizar las pruebas unitarias en este lenguage, no son tan conocidas como para Java.</p>

<p>Entonces mi primer post va a dar a conocer las herramientas para realizar las pruebas unitarias de nuestros proyecto Php
y en  pr&oacute;ximos post vamos a usar estas herramientas para construir un ejemplo pr&aacute;ctico.</p>

<!-- more -->


<p>Para realizar las pruebas unitarias tenemos que contar con:</p>

<ul>
<li>Servidor Apache y php:
<ol>
        <li><a href="http://www.uwamp.com/en/" title="Uwamp" target="_blank">Uwamp</a> ( mi preferido )</li>
        <li><a href="http://www.apachefriends.org/es/xampp.html" title="xampp" target="_blank">xampp</a></li>
    </ol>
</li>
</ul>


<p>Y debemos instalar, si aun no lo tenemos:</p>

<ul>
<li>PEAR <a href="http://pear.php.net/" title="PEAR" target="_blank">P&aacute;gina oficial</a> </li>
<li>PHPUnit <a href="http://phpunit.de/manual/current/en/index.html" title="PHPUnit" target="_blank">P&aacute;gina oficial</a></li>
</ul>


<p>Y un editor que nos permita escribir y realizar nuestra pruebas:</p>

<ul>
<li>Netbeans <a href="https://netbeans.org/" title="Netbeans" target="_blank">P&aacute;gina oficial</a> </li>
<li>Eclipse <a href="http://www.eclipse.org/" title="Eclipse" target="_blank">P&aacute;gina oficial</a></li>
</ul>



]]></content>
  </entry>
  
</feed>
