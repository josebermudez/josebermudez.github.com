<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | El blog de Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></title>
  <link href="http://josebermudez.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://josebermudez.github.io/"/>
  <updated>2014-10-07T11:16:33-05:00</updated>
  <id>http://josebermudez.github.io/</id>
  <author>
    <name><![CDATA[Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico III]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/26/phpunit-plus-tdd-un-ejemplo-practico-iii/"/>
    <updated>2013-07-26T07:40:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/26/phpunit-plus-tdd-un-ejemplo-practico-iii</id>
    <content type="html"><![CDATA[<p>
En esta tercera entrega continuaremos con los test para el requisito de las operaciones matem&aacute;ticas.
Vamos a agregar m&aacute;s casos de prueba:
<ul>
<li>
    Los par&aacute;metros de entrada son un n&uacute;mero entero y un n&uacute;mero decimal.
</li>
<li>
    Los par&aacute;metros de entrada son dos n&uacute;meros decimales.
</li>
<li>
    Los par&aacute;metros de entrada son 1 n&uacute;mero entero negativo y un n&uacute;mero entero positivo.
</li>
<li>
    Los par&aacute;metros de entrada son 2 n&uacute;mero enteros negativos.
</li>
<li>
    Los par&aacute;metros de entrada son 1 letra del alfabeto y 1 n&uacute;mero entero.
</li>
<li>
    Los par&aacute;metros de entrada son Null y 1 n&uacute;mero entero.
</li>
<li>
   Los par&aacute;metros de entrada son 1 boolean falso y 1 n&uacute;mero entero.
</li>
<li>
   Los par&aacute;metros de entrada son 1 boolean true y 1 n&uacute;mero entero.
</li>
</ul>

</p>


<!-- more -->


<h2>Agregamos los nuevos casos al test</h2>


<p>{% codeblock Test phpUnit usando Php lang: PHP%}
&lt;?php
include_once dirname(<strong>FILE</strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{</p>

<pre><code> /**
 * Clase que contiene los m&amp;eacute;todos b&amp;aacute;sicos de operaci&amp;oacute;n
 * 
 * @var ArithmeticBasicOperations 
 */
protected $arithmeticBasicOperations;
 /**
 * M&amp;eacute;todo que se ejecuta por cada test
 * 
 * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
 * que se le va a realizar las pruebas asi como los set de datos a usar.
 * 
 * @author  Jos&amp;eacute; Joaqu&amp;iacute;n Berm&amp;uacute;dez Correa &lt;jose.bermudez.correa@gmail.com&gt;
 * @version 1.0
 * 
 * @return void;
 * 
 */
protected function setUp()
{
    //Instanciamos el objeto que vamos a probar
    $this-&gt;arithmeticBasicOperations = new ArithmeticBasicOperations();
}

/**
 * Test de la funci&amp;oacute;n que realiza la suma
 * 
 * @dataProvider dataProviderAdd
 * 
 */
public function testAdd($numberOne,$numberTwo,$result)
{        
    $this-&gt;assertEquals(
        $result,            
            $this-&gt;arithmeticBasicOperations-&gt;add(
                $numberOne,
                $numberTwo
        )
    );
}
/**
 * Set de datos de prueba para el m&amp;eacute;todo Add
 * 
 * @return array
 */
public function dataProviderAdd()
{
    return array(
            //primer set de datos para el test
            array(1,2,3),
            //Los par&amp;aacute;metros de entrada son un número entero y un n&amp;uacute;mero decimal
            array(1,2.5,3.5),
            //Los par&amp;aacute;metros de entrada son dos n&amp;uacute;meros decimales
            array(1.25,2.50,3.75),
            //Los par&amp;aacute;metros de entrada son 1 n&amp;uacute;mero entero negativo 
            //y un n&amp;uacute;mero entero positivo
            array(-5,17,12),
           //Los par&amp;aacute;metros de entrada son 2 n&amp;uacute;mero enteros negativos
            array(-5,-16,-21),   
            // Los par&amp;aacute;metros de entrada son 1 letra del alfabeto y 1 n&amp;uacute;mero entero
            array("a",25,0),
            // Los par&amp;aacute;metros de entrada son Null y 1 n&amp;uacute;mero entero
            array(null,36,0),
            // Los par&amp;aacute;metros de entrada son 1 boolean falso y 1 n&amp;uacute;mero entero
            array(false,21,0),
            // Los par&amp;aacute;metros de entrada son 1 boolean true y 1 n&amp;uacute;mero entero
            array(true,21,0),                            
    );
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p> Si ejecutamos el test con nuestros nuevos casos de prueba, hay set de datos de entrada
que producen fallos en el test, por ejemplo el caso 9 retorna 22 y estamos esperando que retornara 21, con esta prueba se ha detectado que un booleano en una suma se comporta como un 0 si el valor es false y como un 1 si el valor es true, entonces que debemos hacer ?<br/> <strong>modificar nuestro c&oacute;digo para hacer pasar el nuevo caso de prueba</strong>. 
{% img /images/casos_prueba_fallidos.png 676 318 'ejecutando test phpUnit' 'ejecutando test phpUnit' %}
</p>


<p>El c&oacute;digo productivo queda de la siguiente forma:</p>


<p>{% codeblock Funci&oacute;n aritm&eacute;tica usando Php lang: PHP%}
&lt;?php</p>

<p>/<em>*
 *  ArithmeticBasicOperations.php
 *
 * PHP Version 5.3.0
 *
 * @category  Class
 * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#106;&#x6f;&#115;&#x65;&#x2e;&#x62;&#101;&#114;&#x6d;&#117;&#x64;&#x65;&#x7a;&#46;&#x63;&#111;&#114;&#114;&#101;&#97;&#x40;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#106;&#x6f;&#115;&#101;&#46;&#x62;&#x65;&#114;&#x6d;&#117;&#100;&#x65;&#x7a;&#46;&#x63;&#111;&#114;&#x72;&#101;&#97;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a>
 * @license   <a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php</a>  BSD License
 * @version   SVN: $Id$
 *
 </em>/</p>

<p>/<em>*
 *  ArithmeticBasicOperations.php
 *
 *
 * @category  Class
 * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#x6a;&#111;&#115;&#x65;&#x2e;&#x62;&#101;&#x72;&#x6d;&#x75;&#x64;&#101;&#x7a;&#x2e;&#99;&#x6f;&#x72;&#x72;&#101;&#x61;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#109;">&#x6a;&#111;&#x73;&#101;&#46;&#98;&#x65;&#114;&#x6d;&#117;&#x64;&#101;&#x7a;&#x2e;&#x63;&#x6f;&#114;&#114;&#101;&#97;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a>
 * @license   <a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php</a>  BSD License
 * @version   Release: $Id$
 *
 </em>/
class ArithmeticBasicOperations
{</p>

<pre><code>/**
 * Constructor de la clase
 *      
 * @return void
 * @access public
 * 
 */
public function __construct()
{

}

/**
 * Funcion desctructora 
 *      
 * @return void
 * @access public
 * 
 */
public function __destruct()
{

}
/**
 * Funci&amp;oacute;n que suma 2 n&amp;uacute;meros
 * @param float $floNumberOne
 * @param float $floNumberTwo
 * @return float
 */
public function add($floNumberOne,$floNumberTwo)
{
    $floTotal = 0;
    if(is_numeric($floNumberOne) &amp;&amp; is_numeric($floNumberTwo)){
        $floTotal = $floNumberOne+$floNumberTwo;
    }
    return $floTotal;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Si ejecutamos ahora el test:</p>


<p>{% img /images/casos_prueba_satisfactorio.png 668 88 &lsquo;ejecutando test phpUnit&rsquo; &lsquo;ejecutando test phpUnit&rsquo; %}</p>

<p>Todas las pruebas han pasado, ahora hemos abarcado mas escenarios y se ha asegurado que nuestra fucnci&oacute;n de sumar esta correcta.<br/>Podemos agregar otros casos, como:  
<ul>
<li>
    La entrada es una array.</li>
     <li>Un objeto StdClass.</li> 
    <li>Cualquier otro tipo de dato. </li>
</ul>
para verificar que la funci&oacute;n add se comporta correctamente.</p>


<p>Para el pr&oacute;ximo post vamos a implementar la funci&oacute;n de resta, agregando interaci&oacute;n con un webservice donde aprenderemos a usar Mock y Stubs.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD Un Ejemplo Pr&aacute;ctico II]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/19/phpunit-plus-tdd-un-ejemplo-practico-ii/"/>
    <updated>2013-07-19T08:05:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/19/phpunit-plus-tdd-un-ejemplo-practico-ii</id>
    <content type="html"><![CDATA[<p>Continuando con nuestro ejemplo, vamos a crear el test para la funcion sumar, de esta forma vamos 
profundizando en la forma de usar phpUnit.</p>


<!-- more -->


<h1>Creando nuestro test para la funcionalidad de sumar.</h1>


<p>
De acuerdo al an&aacute;lisis que realizamos en el post anterior para la funci&oacute;n de suma lo que queremos es:
<ul>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
</ul>
</p>


<p><p>
Escribamos entonces el test, retomando lo que habiamos hecho en el post anterior:
{% codeblock Test phpUnit usando Php lang: PHP%}
&lt;?php
include_once dirname(<strong>FILE</strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{</p>

<pre><code> /**
 * Clase que contiene los m&amp;eacute;todos b&amp;aacute;sicos de operaci&amp;oacute;n
 * 
 * @var ArithmeticBasicOperations 
 */
protected $arithmeticBasicOperations;
 /**
 * M&amp;eacute;todo que se ejecuta por cada test
 * 
 * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
 * que se le va a realizar las pruebas asi como los set de datos a usar.
 * 
 * @author  Jos&amp;eacute; Joaqu&amp;iacute;n Berm&amp;uacute;dez Correa &lt;jose.bermudez.correa@gmail.com&gt;
 * @version 1.0
 * 
 * @return void;
 * 
 */
protected function setUp()
{
    //Instanciamos el objeto que vamos a probar
    $this-&gt;arithmeticBasicOperations = new ArithmeticBasicOperations();
}

/**
 * Test de la funci&amp;oacute;n que realiza la suma
 * 
 * @dataProvider dataProviderAdd
 * 
 */
public function testAdd($numberOne,$numberTwo,$result)
{        
    $this-&gt;assertEquals(
        $result,            
            $this-&gt;arithmeticBasicOperations-&gt;add(
                $numberOne,
                $numberTwo
        )
    );
}
/**
 * Set de datos de prueba para el método getReportList
 * 
 * @return array
 */
public function dataProviderAdd()
{
    return array(
            //primer set de datos para el test
            array(1,2,3)
    );
}
</code></pre>

<p>}
{% endcodeblock %}
Analizemos el c&oacute;digo:
<ul>
<li>El comentario <i>@dataProvider</i> nos indica que el test va a usar una fuente de datos como entrada y que la funci&oacute;n que
retorna esa fuente se llama: dataProviderAdd, podemos usar cualquier nombre para la funci&oacute;n pero acostumbro anteponer la palabra <strong>dataProvider</strong> para identificarla facilmente.</li>
<li>El nombre de un test en PhpUnit debe iniciar con la palabra test.</li>
<li>Los par&aacute;metros de entrada del test estan dados en este caso por el dataProvider, si miramos lo que retorna la funci&oacute;n dataProviderAdd, vemos que el array interno tiene 3 posiciones lo cual indica que el test debe recibir 3 par&aacute;metros.</li>
<li>Los test de PhpUnit normalmente usan los assert para validar la prueba, en este caso estamos validando que el valor de la variable $result es igual a lo que nos retorna la funci&oacute;n add de la clase ArithmeticBasicOperations, una lista completa de los assert con los que podemos jugar, la pueden ver aqu&iacute;: <a href="http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.assertions" target="_blank">lista de asserts.</a> </li>
</ul>
<h2>Como ejecutar el test</h2>
Usando la consola de comandos podemos ejecutar un script de prueba, debemos ir hasta la ruta donde
tenemos el test y ejecutar en la consola ( windows ):
{% codeblock Test phpUnit usando Php lang: PHP%}
phpunit ArithmeticBasicOperationsTest.php
{% endcodeblock %}
{% img /images/ejecutando_test_phpUnit.png 671 471 &lsquo;ejecutando test phpUnit&rsquo; &lsquo;ejecutando test phpUnit&rsquo; %}
El test ha fallado, este el primer paso cuando estamos desarrollando orientado a las pruebas: <strong>nuestro primer test debe fallar</strong>, en nuestro caso ha fallado por que la clase <blockquote>ArithmeticBasicOperations.php</blockquote> no existe.
</p>
<h2>Generando la clase ArithmeticBasicOperations.php</h2>
<p>Para generar la clase que contiene los m&eacute;todos de las operaciones matem&aacute;ticas podemos usar el comando de phpUnit:<br/>
<blockquote>
phpunit-skelgen &mdash;class ArithmeticBasicOperationsTest
</blockquote>
{% img /images/creando_clase_desde_el_test.png 669 103 &lsquo;creando clase desde el test&rsquo; &lsquo;creando clase desde el test&rsquo; %}
{% codeblock Clase generada desde el test lang: PHP%}
&lt;?php
/<em>*
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
 </em>/
class ArithmeticBasicOperations
{</p>

<pre><code>/**
 * @todo Implement add().
 */
public function add()
{
    // Remove the following line when you implement this method.
    throw new RuntimeException('Not yet implemented.');
}
</code></pre>

<p>}
{% endcodeblock %}
Modificamos la clase para agregar los par&aacute;metros y las l&iacute;neas de c&oacute;digo necesarias para hacer pasar el test.
{% codeblock Clase generada desde el test lang: PHP%}
&lt;?php
/<em>*
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-07-19 at 10:57:42.
 </em>/
class ArithmeticBasicOperations
{</p>

<pre><code>/**
 * Funci&amp;oacute;n que suma dos n&amp;uacute;meros
 *
 * @param float $floNumberOne primer entero sumando
 * @param float $floNumberTwo segundo entero sumando
 *
 * @return float
 */
 public function add($floNumberOne,$floNumberTwo)
 {
   return  $floNumberOne+$floNumberTwo;
 }
</code></pre>

<p>}
{% endcodeblock %}
Si ejecutamos nuestro test de nuevo
{% img /images/test_php_terminado.png 666 216 &lsquo;El test ha pasado&rsquo; &lsquo;El test ha pasado&rsquo; %}
Ahora el test ha pasado, el assert que hemos definido ha sido exitoso!
</p>
<p>Para el pr&oacute;ximo post vamos a empezar a agregar otros casos de prueba para nuestro test de
tal forma que abarquemos escenarios donde la funci&oacute;n add() como est&aacute; en este momento falla.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico/"/>
    <updated>2013-07-12T07:21:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/12/tdd-un-ejemplo-practico</id>
    <content type="html"><![CDATA[<p>
Para entender mejor el tema de las pruebas unitarias en PHP vamos a crear un ejemplo donde 
demostaremos la utilidad y los beneficios que las pruebas tempranas trae para el desarrollo de un producto de software, ademas descrubriremos mediante TDD como podemos ir construyendo paso a paso nuestro c&oacute;digo productivo y lo mejor, con menos posibilidades de fallo.</p>


<!-- more -->


<p>Ahora si manos a la obra, vamos a suponer que nuestro sprint back log nos entrega el siguiente requisito (historia de usuario):
</p>


<p>
<strong>Como</strong> visitante del portal<br/> 
</p>


<p>
<strong>Yo quiero</strong> realizar las operaciones b&aacute;sicas de la aritm&eacute;tica entre 2 n&uuacute;meros<br/> 
</p>


<p>
<strong>De manera que</strong> pueda sumar, dividir, restar o multiplicar dos n&uacute;meros.<br/> 
</p>


<p>Ya tenemos nuestro requisto:
&ldquo; debemos realizar un modulo que esta en un portal web que nos permita
realizar las operaciones b&aacute;sicas de la aritm&eacute;tica entre 2 n&uuacute;meros &rdquo;.<br/>
<span> cual seria nuestro primer paso?</span>
</p></p>

<p>
Normalmente nuestra respuesta ser&iacute;a: realizar el diagrama de clases, o empezar  a escribir c&oacute;digo, 
aqui es donde viene el cambio de chip, lo primero que tenemos que hacer es:<br/>
<strong> &iexcl; Escribir la prueba !</strong>
</p>


<p>De acuerdo a la historia de usuario vamos a analizar que necesitamos:</p>

<ul>
<li>Una clase que contenga los m&eacute;todos para las operaciones b&aacute;sicas.</li>
<li>Un m&eacute;todo para sumar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la suma de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para restar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es la resta de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para dividir que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el cociente de la divisi&oacute;n de los 2 par&aacute;metros de entrada.</li>
<li>Un m&eacute;todo para multiplicar que reciba 2 n&uacute;meros y retorne 1 n&uacute;mero que es el resultado de la multiplicacipon de 2 n&uacute;meros.</li>
</ul>


<p><p>
Ya con una idea inicial de que funciones debe tener nuestro script, entonces creamos nuestra prueba la vamos a llamar: <blockquote>ArithmeticBasicOperationsTest</blockquote>
{% codeblock Test phpUnit usando Php lang: PHP%}
&lt;?php
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{</p>

<p>}
{% endcodeblock %}
La clase de prueba extiende de una clase llamada PHPUnit_Framework_TestCase y es la que nos indica que estamos programando un test y nos permite usar todas las caracter&iacute;sticas de PhpUnit.
</p>
<p>
{% codeblock Test phpUnit usando Php lang: PHP%}
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{</p>

<pre><code> /**
 * Clase que contiene los m&amp;eacute;todos b&amp;aacute;sicos de operaci&amp;oacute;n
 * 
 * @var ArithmeticBasicOperations 
 */
protected $arithmeticBasicOperations;
 /**
 * M&amp;eacute;todo que se ejecuta por cada test
 * 
 * Se ejecuta al iniciar cada test, se usa para inicializar el objeto a
 * que se le va a realizar las pruebas asi como los set de datos a usar.
 * 
 * @author  Jos&amp;eacute; Joaqu&amp;iacute;n Berm&amp;uacute;dez Correa &lt;jose.bermudez.correa@gmail.com&gt;
 * @version 1.0
 * 
 * @return void;
 * 
 */
protected function setUp()
{
    //Instanciamos el objeto que vamos a probar
    $this-&gt;arithmeticBasicOperations = new ArithmeticBasicOperations();
}
</code></pre>

<p>}
{% endcodeblock %}
Todo script de test debe sobreescribir el m&eacute;todo setUp que se encuentra en la clase <blockquote>PHPUnit_Framework_TestCase</blockquote>
</p>
<p>Para el pr&oacute;ximo post vamos a empezar a codificar nuestro test para probar la funcionalidad de sumar</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalando PhpUnit]]></title>
    <link href="http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit/"/>
    <updated>2013-07-05T08:54:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/07/05/instalando-phpunit</id>
    <content type="html"><![CDATA[<p>Vamos a instalar la herramienta que nos permitir&aacute; realizar nuestras pruebas unitarias.</p>


<p>Para esto debemos tener previamente en nuestra maquina el entorno de desarrollo PEAR, espero en pr&oacute;ximos post escribir un poco de 
como instalar y para que sirve ese framework.</p>


<!-- more -->


<p>Para instalar phpUnit debemos ejecutar la siguiente l&iacute;nea de comando:</p>

<p>{% codeblock Instalar phpUnit usando PEAR &ndash; Windows %}
pear install -a pear.phpunit.de/PHPUnit ( Windows )
{% endcodeblock %}
Se debe ver algo como esto:</p>

<p>{% img /images/cmd-instalar-phpunit.png 350 350 &lsquo;CMD-windows&rsquo; &lsquo;CMD-windows&rsquo; %}</p>

<p>Una vez terminado el proceso ejecutamos el siguiente comando:
{% codeblock Instalar phpUnit usando PEAR &ndash; Windows %}
pear clear-cache
{% endcodeblock %}
Y por &uacute;ltimo verificamos la versi&oacute;n de nuestro phpUnit ejecutando el siguiente comando:
{% codeblock Instalar phpUnit usando PEAR -Windows %}
phpunit &mdash;version
{% endcodeblock %}
Listo hemos terminado, ahora solo nos basta empezar a escribir nuestras pruebas unitarias para que la vida
como programadores se nos haga mas f&aacute;cil.</p>

<p>Hasta pronto !!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pruebas unitarias en PHP]]></title>
    <link href="http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php/"/>
    <updated>2013-06-26T09:38:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/06/26/pruebas-unitarias-en-php</id>
    <content type="html"><![CDATA[<p>Bueno, el pasado 26 de junio particip&eacute; en el <a href="http://agilescolombia.org/2013/05/16/agile-open-medellin-junio-22-de-2013/" title="Agile Open Medell&iacute;n" target="_blank">Agile Open Medell&iacute;n</a> y entre los asistentes se plante&oacute;
un dojo sobre <b>&ldquo;creaci&oacute;n de pruebas unitaras para Php&rdquo;</b>, all&iacute; not&eacute; que a pesar de que existen
herramientas para realizar las pruebas unitarias en este lenguage, no son tan conocidas como para Java.</p>

<p>Entonces mi primer post va a dar a conocer las herramientas para realizar las pruebas unitarias de nuestros proyecto Php
y en  pr&oacute;ximos post vamos a usar estas herramientas para construir un ejemplo pr&aacute;ctico.</p>

<!-- more -->


<p>Para realizar las pruebas unitarias tenemos que contar con:</p>

<ul>
<li>Servidor Apache y php:
<ol>
        <li><a href="http://www.uwamp.com/en/" title="Uwamp" target="_blank">Uwamp</a> ( mi preferido )</li>
        <li><a href="http://www.apachefriends.org/es/xampp.html" title="xampp" target="_blank">xampp</a></li>
    </ol>
</li>
</ul>


<p>Y debemos instalar, si aun no lo tenemos:</p>

<ul>
<li>PEAR <a href="http://pear.php.net/" title="PEAR" target="_blank">P&aacute;gina oficial</a> </li>
<li>PHPUnit <a href="http://phpunit.de/manual/current/en/index.html" title="PHPUnit" target="_blank">P&aacute;gina oficial</a></li>
</ul>


<p>Y un editor que nos permita escribir y realizar nuestra pruebas:</p>

<ul>
<li>Netbeans <a href="https://netbeans.org/" title="Netbeans" target="_blank">P&aacute;gina oficial</a> </li>
<li>Eclipse <a href="http://www.eclipse.org/" title="Eclipse" target="_blank">P&aacute;gina oficial</a></li>
</ul>



]]></content>
  </entry>
  
</feed>
