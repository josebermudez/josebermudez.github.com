<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: webservice | El blog de Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></title>
  <link href="http://josebermudez.github.io/blog/categories/webservice/atom.xml" rel="self"/>
  <link href="http://josebermudez.github.io/"/>
  <updated>2014-11-26T14:33:04-05:00</updated>
  <id>http://josebermudez.github.io/</id>
  <author>
    <name><![CDATA[Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico V]]></title>
    <link href="http://josebermudez.github.io/blog/2013/09/13/phpunit-plus-tdd-un-ejemplo-practico-v/"/>
    <updated>2013-09-13T07:57:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/09/13/phpunit-plus-tdd-un-ejemplo-practico-v</id>
    <content type="html"><![CDATA[<p><p>
En esta entrega vamos crear un test donde debemos conectarnos a un WebService para obtener informaci&oacute;n.
<!-- more -->
Cuando nuestra test se debe realizar sobre una funcionalidad que se conecta a un WS para interactuar debemos mantener la independencia de nuestro test, es decir, un falla en la comunicaci&oacute;n con el WS o una comunicaci&oacute;n lenta, o que el servicio aun no esta disponible en desarrollo no debe ser impedimento para demostrar que mi funcionalidad es correcta.
Para resolver este problema podemos usar los Stubs y as&iacute; simular las repuestas del ws. <br/>Veamos un ejemplo.
<p>Vamos a crear el test para el m&eacute;todo que nos va a permitir dividir 2 n&uacute;meros enteros, pero resulta que esta funcionalidad nos la provee un WS que nos hemos encontrado en internet y nos evita tener que implementar hacer una complicada l&oacute;gica para dividir 2 n&uacute;meros.<br/>
El WS tiene un m&eacute;todo que se llama dividir y recibe 2 par&aacute;metros, n&uacute;meros enteros y retorna el cociente de la divisi&oacute;n.<br/>
Nuestra funci&oacute;n para consumir el servicio es la siguiente:
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ArithmeticBasicOperations lang: php </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class ArithmeticBasicOperations
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public function divide(SoapClient $objSoap, $intNumberOne = 0,
</span><span class='line'>    $intNumberTwo = 0)
</span><span class='line'>{
</span><span class='line'>    try {
</span><span class='line'>        $intDivResult = $objSoap-&gt;divide($intNumberOne, $intNumberTwo);
</span><span class='line'>        return $intDivResult;
</span><span class='line'>    } catch (Exception $e) {
</span><span class='line'>        var_dump($e);
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>?></span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Algo importante es que debemos descargar el wsdl a nuestro ambiente de desarrollo, ya que este contiene la descripci&oacute; de los m&eacute;todos, entradas y salidas del WebService y a partir de all&iacute; es que se crea el stub, para nuestro ejemplo el wsdl es el siguiente: </p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>divide lang: XML</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version=&ldquo;1.0&rdquo;?>
</span><span class='line'>&lt;definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://localhost/switchWs/index.php" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" name="Service" targetNamespace="http://localhost/switchWs/index.php">&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;types&gt;
</span><span class='line'>    &lt;xsd:schema targetNamespace="http://localhost/switchWs/index.php"/&gt;
</span><span class='line'>&lt;/types&gt;
</span><span class='line'>&lt;portType name="ServicePort"&gt;
</span><span class='line'>    &lt;operation name="divide"&gt;
</span><span class='line'>        &lt;documentation&gt;Funci&amp;#xF3;n que divide dos n&amp;#xFA;meros y retorna el cociente&lt;/documentation&gt;
</span><span class='line'>        &lt;input message="tns:divideIn"/&gt;
</span><span class='line'>        &lt;output message="tns:divideOut"/&gt;
</span><span class='line'>    &lt;/operation&gt;
</span><span class='line'>&lt;/portType&gt;
</span><span class='line'>&lt;binding name="ServiceBinding" type="tns:ServicePort"&gt;
</span><span class='line'>    &lt;soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
</span><span class='line'>    &lt;operation name="divide"&gt;
</span><span class='line'>        &lt;soap:operation soapAction="http://localhost/switchWs/index.php#divide"/&gt;
</span><span class='line'>        &lt;input&gt;
</span><span class='line'>            &lt;soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost/switchWs/index.php"/&gt;
</span><span class='line'>        &lt;/input&gt;
</span><span class='line'>        &lt;output&gt;
</span><span class='line'>            &lt;soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost/switchWs/index.php"/&gt;
</span><span class='line'>        &lt;/output&gt;
</span><span class='line'>    &lt;/operation&gt;
</span><span class='line'>&lt;/binding&gt;
</span><span class='line'>&lt;service name="ServiceService"&gt;
</span><span class='line'>    &lt;port name="ServicePort" binding="tns:ServiceBinding"&gt;
</span><span class='line'>        &lt;soap:address location="http://localhost/switchWs/index.php"/&gt;
</span><span class='line'>    &lt;/port&gt;
</span><span class='line'>&lt;/service&gt;
</span><span class='line'>&lt;message name="divideIn"&gt;
</span><span class='line'>    &lt;part name="intNumberOne" type="xsd:int"/&gt;
</span><span class='line'>    &lt;part name="intNumerTwo" type="xsd:int"/&gt;
</span><span class='line'>&lt;/message&gt;
</span><span class='line'>&lt;message name="divideOut"&gt;
</span><span class='line'>    &lt;part name="return" type="xsd:int"/&gt;
</span><span class='line'>&lt;/message&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/definitions></span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Ahora escribamos el test:</p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ArithmeticBasicOperationsTest lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> ...
</span><span class='line'>  /**
</span><span class='line'> * Test de la funci&amp;oacute;n que realiza la divisi&amp;oacute;n
</span><span class='line'> * 
</span><span class='line'> * @dataProvider dataProviderDivide
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>public function testDivide($stubSoapObject,$numberOne,$numberTwo,$result)
</span><span class='line'>{        
</span><span class='line'>    $this-&gt;assertEquals(
</span><span class='line'>        $result,            
</span><span class='line'>            $this-&gt;arithmeticBasicOperations-&gt;divide(
</span><span class='line'>                $stubSoapObject,
</span><span class='line'>                $numberOne,
</span><span class='line'>                $numberTwo
</span><span class='line'>        )
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>/**
</span><span class='line'> * Set de datos de prueba para el m&amp;eacute;todo divide
</span><span class='line'> * 
</span><span class='line'> * @return array
</span><span class='line'> */
</span><span class='line'>public function dataProviderDivide()
</span><span class='line'>{
</span><span class='line'>    //crea el mock desde el wsdl del servicio
</span><span class='line'>    $stubSoapObject = $this-&gt;getMockFromWsdl(
</span><span class='line'>      'divide.wsdl'
</span><span class='line'>    );       
</span><span class='line'>
</span><span class='line'>    $stubSoapObject-&gt;expects($this-&gt;any())
</span><span class='line'>                 -&gt;method('divide')
</span><span class='line'>                 -&gt;will($this-&gt;returnValue(1));
</span><span class='line'>    return array(
</span><span class='line'>            //primer set de datos para el test
</span><span class='line'>            array($stubSoapObject,5,5,1),
</span><span class='line'>
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>...
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>?></span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
La funci&oacute;n que genera el stub desde la definici&oacute;n del WebService (wsdl) es : getMockFromWsdl, como par&aacute;metro se le env&iacute;a la ruta donde esta el archivo wsdl, usanto el m&eacute;todo expects definimos cual es el nombre de la funci&oacute;n del servicio que se a a usar y el valor que retorna. en nuestro caso sabemos que la divisi&oacute;n 5/5 debe retornar el valor 1 y esto lo indicamos con : $this->returnValue(1), si la respuesta del WebService es mas compleja, debemos crear la respuesta y agregarla a la instrucci&oacute;n $this->returnValue($objetoComplejo):
</p>
<img src="/images/test_stub_ws.png" width="663" height="175" title="&lsquo;Usando Stubs phpUnit WebServices&rsquo; &lsquo;Usando Stubs phpUnit WebServices&rsquo;" >
<p>El test pasa ya que definimos que el WS retorna 1 y que el resultado que esperamos es 1</p>
<p>Con este ejemplo hemos demostrado como realizar test sobre funcionalidades que deben conectarse a servicios externos y como nuestro test sigue siendo independiente ya que no necesita conectarse al WebService externo</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico IV]]></title>
    <link href="http://josebermudez.github.io/blog/2013/08/02/phpunit-plus-tdd-un-ejemplo-practico-iv/"/>
    <updated>2013-08-02T07:50:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/08/02/phpunit-plus-tdd-un-ejemplo-practico-iv</id>
    <content type="html"><![CDATA[<p><p>
En esta entrega vamos a ver como podemos usar mocks y stubs para realizar nuestras pruebas unitarias.
<!-- more -->
<h2>Stubs</h2>
<p>Un stub es un objeto que sustituye al objeto real y retorna determinados valores ya definidos.</p>
<p>Con un ejemplo nos puede quedar mas claro el concepto:<br/>
<p>Vamos a crear el test para el m&eacute;todo que nos va a permitir restar 2 n&uacute;meros, pero resulta que el m&eacute;todo que vamos a probar internamente invoca una clase que muy amablemente un proveedor amigo va a desarrollar, la clase de nuestro amigo aun no esta terminada, aqu&iacute; es donde entra el concepto del stub, nosotros podemos asegurar que nuestro m&eacute;todo de resta pasa los test sin necesidad de contar con la clase externa.
</p>
<p>La clase de nuestro proveedor amigo se llama: Subtracting, el m&eacute;todo que debemos usar se llama subs y recibe dos par&aacute;metros n&uacute;mero enteros y retorna un n&uacute;mero entero, con esta informaci&oacute;n nos basta para definir nuestra clase Stub
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Stub lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>class Subtracting
</span><span class='line'>{&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public function subs()
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}
</span><span class='line'>?></span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
Ahora podemos crear nuestro test
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/Subtracting.php&rsquo;;
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
</span><span class='line'>&hellip;
</span><span class='line'>  /**&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> * Test de la funci&amp;oacute;n que realiza la resta
</span><span class='line'> * 
</span><span class='line'> * @dataProvider dataProviderSub
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>public function testSub($numberOne,$numberTwo,$result)
</span><span class='line'>{        
</span><span class='line'>
</span><span class='line'>    // Creamos el stub para la clase Subtracting.
</span><span class='line'>    $stub = $this-&gt;getMock('Subtracting'); 
</span><span class='line'>    // Configuramos el stub
</span><span class='line'>    $stub-&gt;expects($this-&gt;any())
</span><span class='line'>         -&gt;method('sub')
</span><span class='line'>         -&gt;will($this-&gt;returnValue(5));
</span><span class='line'>
</span><span class='line'>    $this-&gt;assertEquals(
</span><span class='line'>        $result,            
</span><span class='line'>            $this-&gt;arithmeticBasicOperations-&gt;sub(
</span><span class='line'>                $numberOne,
</span><span class='line'>                $numberTwo,
</span><span class='line'>                $stub
</span><span class='line'>        )
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> /**&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> * Set de datos de prueba para el m&amp;eacute;todo Sub
</span><span class='line'> * 
</span><span class='line'> * @return array
</span><span class='line'> */
</span><span class='line'>public function dataProviderSub()
</span><span class='line'>{
</span><span class='line'>    return array(
</span><span class='line'>            //primer set de datos para el test
</span><span class='line'>            array(7,2,5)                
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
<li>Con la instrucci&oacute;n getMock estamos creando un mock de una clase ya definidida</li>
<li>Con la m&eacute;todo expects podemos definir los escenarios y la respuesta que necesitamos del objeto stub</li>
<li>Con la funci&oacute;n method definimos el m&eacute;todo que vamos a sustituir</li>
<li>Con el m&eacute;todo will definimos la respuesta esperada</li>
</ul>
Si ejecutamos nuestro test va a fallar, entonces escribamos el c&oacute;digo productivo que lo hace pasar.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Funci&oacute;n aritm&eacute;tica usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;em>*
</span><span class='line'> *  ArithmeticBasicOperations.php
</span><span class='line'> *
</span><span class='line'> * PHP Version 5.3.0
</span><span class='line'> *
</span><span class='line'> * @category  Class
</span><span class='line'> * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa &lt;a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#111;&#115;&#101;&#x2e;&#x62;&#x65;&#114;&#x6d;&#x75;&#100;&#101;&#x7a;&#46;&#99;&#111;&#x72;&#114;&#101;&#97;&#x40;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x6f;&#x73;&#x65;&#46;&#x62;&#x65;&#x72;&#x6d;&#117;&#x64;&#x65;&#122;&#46;&#x63;&#111;&#114;&#114;&#101;&#x61;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;&lt;/a>
</span><span class='line'> * @license   &lt;a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php&lt;/a>  BSD License
</span><span class='line'> * @version   SVN: $Id$
</span><span class='line'> *
</span><span class='line'> &lt;/em>/&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>/&lt;strong>
</span><span class='line'> *  ArithmeticBasicOperations.php
</span><span class='line'> *
</span><span class='line'> *
</span><span class='line'> * @category  Class
</span><span class='line'> * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa &lt;a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#106;&#x6f;&#115;&#101;&#46;&#x62;&#101;&#114;&#x6d;&#117;&#x64;&#x65;&#122;&#46;&#99;&#111;&#114;&#114;&#x65;&#x61;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#x6d;">&#x6a;&#111;&#115;&#101;&#x2e;&#98;&#x65;&#x72;&#x6d;&#117;&#100;&#101;&#122;&#46;&#99;&#111;&#114;&#114;&#101;&#x61;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;&lt;/a>
</span><span class='line'> * @license   &lt;a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php&lt;/a>  BSD License
</span><span class='line'> * @version   Release: $Id$
</span><span class='line'> *
</span><span class='line'> */
</span><span class='line'>class ArithmeticBasicOperations
</span><span class='line'>{
</span><span class='line'>&hellip;
</span><span class='line'> /&lt;/strong>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> * 
</span><span class='line'> * @param float $floNumberOne
</span><span class='line'> * @param float $floNumberTwo
</span><span class='line'> * @param Substracting $objSubstracting 
</span><span class='line'>  * 
</span><span class='line'> * @return float
</span><span class='line'> */
</span><span class='line'>public function sub($floNumberOne,$floNumberTwo, $objSubstracting)
</span><span class='line'>{
</span><span class='line'>    $floTotal = 0;
</span><span class='line'>    if(is_numeric($floNumberOne) &amp;&amp; is_numeric($floNumberTwo)){
</span><span class='line'>        $floTotal = $objSubstracting-&gt;sub($floNumberOne,$floNumberTwo);
</span><span class='line'>    }
</span><span class='line'>    return $floTotal;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Si ejecutamos el test este pasa y sin necesidad de tener la clase Substracting desarrollada. Podemos modificar el valor de lo que la funci&oacute;n retorna y as&iacute; verificar diferentes escenarios, o crear cuantos test necesitemos modificando el valor del m&eacute;todo will</p>
<h2>Mocks</h2>
<p>Un mock es un objeto que sustituyen a los objeto reales y que es capaz de comportarse de una manera determinada, un mock se usa cuando queremos verificar que un m&eacute;todo ha sido invocado o que la clase ha sido correctamente usada, en PhpUnit los stub y mocks se definien usando la misma instrucci&oacute;n getMock, para dejarlo mas claro miremos un ejemplo: </p>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Test phpUnit Mocks usando Php lang: PHP</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
</span><span class='line'>include_once dirname(&lt;strong>FILE&lt;/strong>) . &lsquo;/Subtracting.php&rsquo;;
</span><span class='line'>class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
</span><span class='line'>&hellip;
</span><span class='line'>   /**&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> * Test de la funci&amp;oacute;n que realiza la resta usando mock
</span><span class='line'> * 
</span><span class='line'> * @dataProvider dataProviderSubMock
</span><span class='line'> * 
</span><span class='line'> */
</span><span class='line'>public function testSubMock($numberOne,$numberTwo,$result)
</span><span class='line'>{        
</span><span class='line'>
</span><span class='line'>    // Creamos el stub para la clase Subtracting.
</span><span class='line'>    $stub = $this-&gt;getMock('Subtracting'); 
</span><span class='line'>    // Configuramos el stub
</span><span class='line'>    $stub-&gt;expects($this-&gt;exactly(2))
</span><span class='line'>         -&gt;method('sub')
</span><span class='line'>         -&gt;will($this-&gt;returnValue(5));
</span><span class='line'>
</span><span class='line'>    $this-&gt;assertEquals(
</span><span class='line'>        $result,            
</span><span class='line'>            $this-&gt;arithmeticBasicOperations-&gt;sub(
</span><span class='line'>                $numberOne,
</span><span class='line'>                $numberTwo,
</span><span class='line'>                $stub
</span><span class='line'>        )
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p> /**&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code> * Set de datos de prueba para el m&amp;eacute;todo Sub
</span><span class='line'> * 
</span><span class='line'> * @return array
</span><span class='line'> */
</span><span class='line'>public function dataProviderSubMock()
</span><span class='line'>{
</span><span class='line'>    return array(
</span><span class='line'>            //primer set de datos para el test
</span><span class='line'>            array(7,2,5)                
</span><span class='line'>    );
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>&hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>El test intenta verificar que la funci&oacute;n Sub de la clase Subtracting es llamada 2 veces $this->exactly(2) </p>
<img src="/images/ejecuta_mock_falla.png" width="657" height="199" title="&lsquo;Usando Mocks phpUnit&rsquo; &lsquo;Usando Mocks phpUnit&rsquo;" >
<p>El test falla ya que la funci&oacute;n Sub solo es llamada una vez</p></p>

<p><p>Para el pr&oacute;ximo post vamos a ver como realizar test independientes que usen llamados a WebServices.</p></p>
]]></content>
  </entry>
  
</feed>
