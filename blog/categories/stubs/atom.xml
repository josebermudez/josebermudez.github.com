<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stubs | El blog de Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></title>
  <link href="http://josebermudez.github.io/blog/categories/stubs/atom.xml" rel="self"/>
  <link href="http://josebermudez.github.io/"/>
  <updated>2014-10-07T11:21:49-05:00</updated>
  <id>http://josebermudez.github.io/</id>
  <author>
    <name><![CDATA[Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico V]]></title>
    <link href="http://josebermudez.github.io/blog/2013/09/13/phpunit-plus-tdd-un-ejemplo-practico-v/"/>
    <updated>2013-09-13T07:57:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/09/13/phpunit-plus-tdd-un-ejemplo-practico-v</id>
    <content type="html"><![CDATA[<p><p>
En esta entrega vamos crear un test donde debemos conectarnos a un WebService para obtener informaci&oacute;n.
<!-- more -->
Cuando nuestra test se debe realizar sobre una funcionalidad que se conecta a un WS para interactuar debemos mantener la independencia de nuestro test, es decir, un falla en la comunicaci&oacute;n con el WS o una comunicaci&oacute;n lenta, o que el servicio aun no esta disponible en desarrollo no debe ser impedimento para demostrar que mi funcionalidad es correcta.
Para resolver este problema podemos usar los Stubs y as&iacute; simular las repuestas del ws. <br/>Veamos un ejemplo.
<p>Vamos a crear el test para el m&eacute;todo que nos va a permitir dividir 2 n&uacute;meros enteros, pero resulta que esta funcionalidad nos la provee un WS que nos hemos encontrado en internet y nos evita tener que implementar hacer una complicada l&oacute;gica para dividir 2 n&uacute;meros.<br/>
El WS tiene un m&eacute;todo que se llama dividir y recibe 2 par&aacute;metros, n&uacute;meros enteros y retorna el cociente de la divisi&oacute;n.<br/>
Nuestra funci&oacute;n para consumir el servicio es la siguiente:
</p>
{% codeblock ArithmeticBasicOperations lang: php %}
&lt;?php</p>

<p>class ArithmeticBasicOperations
{</p>

<pre><code>public function divide(SoapClient $objSoap, $intNumberOne = 0,
    $intNumberTwo = 0)
{
    try {
        $intDivResult = $objSoap-&gt;divide($intNumberOne, $intNumberTwo);
        return $intDivResult;
    } catch (Exception $e) {
        var_dump($e);
    }
}
</code></pre>

<p>}
?>
{% endcodeblock %}
<p>Algo importante es que debemos descargar el wsdl a nuestro ambiente de desarrollo, ya que este contiene la descripci&oacute; de los m&eacute;todos, entradas y salidas del WebService y a partir de all&iacute; es que se crea el stub, para nuestro ejemplo el wsdl es el siguiente: </p>
{% codeblock divide lang: XML%}
&lt;?xml version=&ldquo;1.0&rdquo;?>
<definitions xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://localhost/switchWs/index.php" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" name="Service" targetNamespace="http://localhost/switchWs/index.php"></p>

<pre><code>&lt;types&gt;
    &lt;xsd:schema targetNamespace="http://localhost/switchWs/index.php"/&gt;
&lt;/types&gt;
&lt;portType name="ServicePort"&gt;
    &lt;operation name="divide"&gt;
        &lt;documentation&gt;Funci&amp;#xF3;n que divide dos n&amp;#xFA;meros y retorna el cociente&lt;/documentation&gt;
        &lt;input message="tns:divideIn"/&gt;
        &lt;output message="tns:divideOut"/&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name="ServiceBinding" type="tns:ServicePort"&gt;
    &lt;soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
    &lt;operation name="divide"&gt;
        &lt;soap:operation soapAction="http://localhost/switchWs/index.php#divide"/&gt;
        &lt;input&gt;
            &lt;soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost/switchWs/index.php"/&gt;
        &lt;/input&gt;
        &lt;output&gt;
            &lt;soap:body use="encoded" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" namespace="http://localhost/switchWs/index.php"/&gt;
        &lt;/output&gt;
    &lt;/operation&gt;
&lt;/binding&gt;
&lt;service name="ServiceService"&gt;
    &lt;port name="ServicePort" binding="tns:ServiceBinding"&gt;
        &lt;soap:address location="http://localhost/switchWs/index.php"/&gt;
    &lt;/port&gt;
&lt;/service&gt;
&lt;message name="divideIn"&gt;
    &lt;part name="intNumberOne" type="xsd:int"/&gt;
    &lt;part name="intNumerTwo" type="xsd:int"/&gt;
&lt;/message&gt;
&lt;message name="divideOut"&gt;
    &lt;part name="return" type="xsd:int"/&gt;
&lt;/message&gt;
</code></pre>

<p></definitions>
{% endcodeblock %}
<p>Ahora escribamos el test:</p>
{% codeblock ArithmeticBasicOperationsTest lang: PHP%}
&lt;?php
include_once dirname(<strong>FILE</strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{</p>

<pre><code> ...
  /**
 * Test de la funci&amp;oacute;n que realiza la divisi&amp;oacute;n
 * 
 * @dataProvider dataProviderDivide
 * 
 */
public function testDivide($stubSoapObject,$numberOne,$numberTwo,$result)
{        
    $this-&gt;assertEquals(
        $result,            
            $this-&gt;arithmeticBasicOperations-&gt;divide(
                $stubSoapObject,
                $numberOne,
                $numberTwo
        )
    );
}
/**
 * Set de datos de prueba para el m&amp;eacute;todo divide
 * 
 * @return array
 */
public function dataProviderDivide()
{
    //crea el mock desde el wsdl del servicio
    $stubSoapObject = $this-&gt;getMockFromWsdl(
      'divide.wsdl'
    );       

    $stubSoapObject-&gt;expects($this-&gt;any())
                 -&gt;method('divide')
                 -&gt;will($this-&gt;returnValue(1));
    return array(
            //primer set de datos para el test
            array($stubSoapObject,5,5,1),

    );
}
...
</code></pre>

<p>}
?>
{% endcodeblock %}
<p>
La funci&oacute;n que genera el stub desde la definici&oacute;n del WebService (wsdl) es : getMockFromWsdl, como par&aacute;metro se le env&iacute;a la ruta donde esta el archivo wsdl, usanto el m&eacute;todo expects definimos cual es el nombre de la funci&oacute;n del servicio que se a a usar y el valor que retorna. en nuestro caso sabemos que la divisi&oacute;n 5/5 debe retornar el valor 1 y esto lo indicamos con : $this->returnValue(1), si la respuesta del WebService es mas compleja, debemos crear la respuesta y agregarla a la instrucci&oacute;n $this->returnValue($objetoComplejo):
</p>
{% img /images/test_stub_ws.png 663 175 &lsquo;Usando Stubs phpUnit WebServices&rsquo; &lsquo;Usando Stubs phpUnit WebServices&rsquo; %}
<p>El test pasa ya que definimos que el WS retorna 1 y que el resultado que esperamos es 1</p>
<p>Con este ejemplo hemos demostrado como realizar test sobre funcionalidades que deben conectarse a servicios externos y como nuestro test sigue siendo independiente ya que no necesita conectarse al WebService externo</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpUnit + TDD un ejemplo pr&aacute;ctico IV]]></title>
    <link href="http://josebermudez.github.io/blog/2013/08/02/phpunit-plus-tdd-un-ejemplo-practico-iv/"/>
    <updated>2013-08-02T07:50:00-05:00</updated>
    <id>http://josebermudez.github.io/blog/2013/08/02/phpunit-plus-tdd-un-ejemplo-practico-iv</id>
    <content type="html"><![CDATA[<p><p>
En esta entrega vamos a ver como podemos usar mocks y stubs para realizar nuestras pruebas unitarias.
<!-- more -->
<h2>Stubs</h2>
<p>Un stub es un objeto que sustituye al objeto real y retorna determinados valores ya definidos.</p>
<p>Con un ejemplo nos puede quedar mas claro el concepto:<br/>
<p>Vamos a crear el test para el m&eacute;todo que nos va a permitir restar 2 n&uacute;meros, pero resulta que el m&eacute;todo que vamos a probar internamente invoca una clase que muy amablemente un proveedor amigo va a desarrollar, la clase de nuestro amigo aun no esta terminada, aqu&iacute; es donde entra el concepto del stub, nosotros podemos asegurar que nuestro m&eacute;todo de resta pasa los test sin necesidad de contar con la clase externa.
</p>
<p>La clase de nuestro proveedor amigo se llama: Subtracting, el m&eacute;todo que debemos usar se llama subs y recibe dos par&aacute;metros n&uacute;mero enteros y retorna un n&uacute;mero entero, con esta informaci&oacute;n nos basta para definir nuestra clase Stub
{% codeblock Stub lang: PHP%}
&lt;?php</p>

<p>class Subtracting
{</p>

<pre><code>public function subs()
{

}
</code></pre>

<p>}
?>
{% endcodeblock %}
</p>
Ahora podemos crear nuestro test
{% codeblock Test phpUnit usando Php lang: PHP%}
&lt;?php
include_once dirname(<strong>FILE</strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
include_once dirname(<strong>FILE</strong>) . &lsquo;/Subtracting.php&rsquo;;
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
&hellip;
  /**</p>

<pre><code> * Test de la funci&amp;oacute;n que realiza la resta
 * 
 * @dataProvider dataProviderSub
 * 
 */
public function testSub($numberOne,$numberTwo,$result)
{        

    // Creamos el stub para la clase Subtracting.
    $stub = $this-&gt;getMock('Subtracting'); 
    // Configuramos el stub
    $stub-&gt;expects($this-&gt;any())
         -&gt;method('sub')
         -&gt;will($this-&gt;returnValue(5));

    $this-&gt;assertEquals(
        $result,            
            $this-&gt;arithmeticBasicOperations-&gt;sub(
                $numberOne,
                $numberTwo,
                $stub
        )
    );
}
</code></pre>

<p> /**</p>

<pre><code> * Set de datos de prueba para el m&amp;eacute;todo Sub
 * 
 * @return array
 */
public function dataProviderSub()
{
    return array(
            //primer set de datos para el test
            array(7,2,5)                
    );
}
</code></pre>

<p>&hellip;
}
{% endcodeblock %}
<ul>
<li>Con la instrucci&oacute;n getMock estamos creando un mock de una clase ya definidida</li>
<li>Con la m&eacute;todo expects podemos definir los escenarios y la respuesta que necesitamos del objeto stub</li>
<li>Con la funci&oacute;n method definimos el m&eacute;todo que vamos a sustituir</li>
<li>Con el m&eacute;todo will definimos la respuesta esperada</li>
</ul>
Si ejecutamos nuestro test va a fallar, entonces escribamos el c&oacute;digo productivo que lo hace pasar.
{% codeblock Funci&oacute;n aritm&eacute;tica usando Php lang: PHP%}
&lt;?php</p>

<p>/<em>*
 *  ArithmeticBasicOperations.php
 *
 * PHP Version 5.3.0
 *
 * @category  Class
 * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa <a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#106;&#x6f;&#115;&#101;&#46;&#x62;&#101;&#x72;&#109;&#x75;&#100;&#101;&#x7a;&#46;&#x63;&#111;&#114;&#114;&#x65;&#97;&#64;&#103;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#109;">&#106;&#x6f;&#x73;&#x65;&#x2e;&#98;&#101;&#x72;&#x6d;&#117;&#100;&#101;&#122;&#x2e;&#99;&#x6f;&#x72;&#x72;&#x65;&#x61;&#x40;&#103;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a>
 * @license   <a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php</a>  BSD License
 * @version   SVN: $Id$
 *
 </em>/</p>

<p>/<strong>
 *  ArithmeticBasicOperations.php
 *
 *
 * @category  Class
 * @author    Jos&eacute; Joaqu&iacute;n Berm&uacute;dez Correa <a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x6a;&#x6f;&#x73;&#x65;&#x2e;&#x62;&#101;&#x72;&#109;&#x75;&#100;&#x65;&#x7a;&#x2e;&#99;&#x6f;&#x72;&#114;&#x65;&#97;&#x40;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x6a;&#111;&#x73;&#x65;&#x2e;&#x62;&#101;&#x72;&#109;&#117;&#x64;&#101;&#x7a;&#46;&#99;&#111;&#x72;&#x72;&#101;&#97;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a>
 * @license   <a href="http://www.opensource.org/licenses/bsd-license.php">http://www.opensource.org/licenses/bsd-license.php</a>  BSD License
 * @version   Release: $Id$
 *
 */
class ArithmeticBasicOperations
{
&hellip;
 /</strong></p>

<pre><code> * 
 * @param float $floNumberOne
 * @param float $floNumberTwo
 * @param Substracting $objSubstracting 
  * 
 * @return float
 */
public function sub($floNumberOne,$floNumberTwo, $objSubstracting)
{
    $floTotal = 0;
    if(is_numeric($floNumberOne) &amp;&amp; is_numeric($floNumberTwo)){
        $floTotal = $objSubstracting-&gt;sub($floNumberOne,$floNumberTwo);
    }
    return $floTotal;
}
</code></pre>

<p>&hellip;
}
{% endcodeblock %}
<p>Si ejecutamos el test este pasa y sin necesidad de tener la clase Substracting desarrollada. Podemos modificar el valor de lo que la funci&oacute;n retorna y as&iacute; verificar diferentes escenarios, o crear cuantos test necesitemos modificando el valor del m&eacute;todo will</p>
<h2>Mocks</h2>
<p>Un mock es un objeto que sustituyen a los objeto reales y que es capaz de comportarse de una manera determinada, un mock se usa cuando queremos verificar que un m&eacute;todo ha sido invocado o que la clase ha sido correctamente usada, en PhpUnit los stub y mocks se definien usando la misma instrucci&oacute;n getMock, para dejarlo mas claro miremos un ejemplo: </p>
{% codeblock Test phpUnit Mocks usando Php lang: PHP%}
&lt;?php
include_once dirname(<strong>FILE</strong>) . &lsquo;/ArithmeticBasicOperations.php&rsquo;;
include_once dirname(<strong>FILE</strong>) . &lsquo;/Subtracting.php&rsquo;;
class ArithmeticBasicOperationsTest extends PHPUnit_Framework_TestCase{
&hellip;
   /**</p>

<pre><code> * Test de la funci&amp;oacute;n que realiza la resta usando mock
 * 
 * @dataProvider dataProviderSubMock
 * 
 */
public function testSubMock($numberOne,$numberTwo,$result)
{        

    // Creamos el stub para la clase Subtracting.
    $stub = $this-&gt;getMock('Subtracting'); 
    // Configuramos el stub
    $stub-&gt;expects($this-&gt;exactly(2))
         -&gt;method('sub')
         -&gt;will($this-&gt;returnValue(5));

    $this-&gt;assertEquals(
        $result,            
            $this-&gt;arithmeticBasicOperations-&gt;sub(
                $numberOne,
                $numberTwo,
                $stub
        )
    );
}
</code></pre>

<p> /**</p>

<pre><code> * Set de datos de prueba para el m&amp;eacute;todo Sub
 * 
 * @return array
 */
public function dataProviderSubMock()
{
    return array(
            //primer set de datos para el test
            array(7,2,5)                
    );
}
</code></pre>

<p>&hellip;
}
{% endcodeblock %}
<p>El test intenta verificar que la funci&oacute;n Sub de la clase Subtracting es llamada 2 veces $this->exactly(2) </p>
{% img /images/ejecuta_mock_falla.png 657 199 &lsquo;Usando Mocks phpUnit&rsquo; &lsquo;Usando Mocks phpUnit&rsquo; %}
<p>El test falla ya que la funci&oacute;n Sub solo es llamada una vez</p></p>

<p><p>Para el pr&oacute;ximo post vamos a ver como realizar test independientes que usen llamados a WebServices.</p></p>
]]></content>
  </entry>
  
</feed>
